---
layout: clojure
head: Jark
---

h2. Plugins

# "Controlling the JVM":#vm
# "Classpath Manager":#classpath
# "Namespace Utilities":#namespace
# "Package Manager":#package

<a name="vm"></a>

h3. Controlling the JVM

<pre class="terminal"><code>server> jark server start [--port PORT(9000)]</code></pre>

To list all the threads that are running on the VM:
<pre class="terminal"><code>client> jark vm threads</code></pre>

To do garbage collection on demand:
<pre class="terminal"><code>client> jark vm gc</code></pre>

<a name="classpath"></a>

h3. Classpath Manager

To list the available classpaths:
<pre class="terminal"><code>client> jark cp list
 file:/home/icylisper/.cljr/lib/clojure-1.3.0.jar
 file:/home/icylisper/.cljr/lib/clojure-contrib-1.3.0.jar
 ......
</code></pre>

To add a jar or directory as the classpath:
<pre class="terminal"><code>server> jark cp add /path-on-server/to/jar
server> jark cp add DIR
</code></pre>

Note that the path should be that on the server. Adding classpath from client will be supported in the next release.

<a name="namespace"></a>

h3. Namespace utilities

Jark provides some interesting namespace utilities. Let us start by loading a file that has a namespace defined in it.

{% highlight clojure %}
(ns factorial)

(defn compute [n] 
  (let [n (Integer. n)]    
    (apply * (take n (iterate inc 1)))))

(defn fact-map [n] 
  (let [n (Integer. n)]
    (zipmap (take n (iterate inc 1))
            (map factorial/compute (take n (iterate inc 1))))))
{% endhighlight %}

<pre class="terminal"><code>client> jark ns load ./factorial.clj</code></pre>

Running it is really simple:
<pre class="terminal"><code>client> jark factorial compute 10</code></pre>

Let us now define a fact-map function.

<code>client> jark repl factorial</code> to get to the repl for the 'factorial' namespace. Let us now map the factorial function over a range 0 .. n.

To output in json, do:
<pre class="terminal"><code>client> jark factorial fact-map 3 --json
 => {"3" : 6, "2" : 2, "1" : 1}
</code></pre>

<a name="package"></a>

h3. Package manager

Jark integrates well with exisiting clojure package management tools like cljr and lein.

<pre class="terminal"><code>client> jark package search -p base64
  clj-base64                         0.0.0-SNAPSHOT
  org.clojars.s450r1/dcm4che-base64  2.0.23
</code></pre>

To install a package with the latest version from a maven repository:
<pre class="terminal"><code>client> jark package install --package compojure</code></pre>

Most often, we would want to install a particular version:
<pre class="terminal"><code>$ jark package install -p compojure -v 0.4</code></pre>

Once we install the package, we can *push* the jars to the running VM:
<pre class="terminal"><code>client> jark package install -p clj-base64
$ jark cp add ~/.cljr/lib/clj-base64-*.jar
$ jark cp list
$ jark remvee.base64 encode-str "clojure rocks"
  => Y2xvanVyZSByb2Nrcw==
</code></pre>

To list the dependencies of a package with a particular version:
<pre class="terminal"><code>client> jark package deps --package PACKAGE [--version]</code></pre>

To find the latest version of a package:
<pre class="terminal"><code>client> jark package latest --package PACKAGE
=> VERSION</code></pre>

To list all the packages that are installed:
<pre class="terminal"><code>client> jark package installed 
....
</code></pre>

There is also the <i>repo</i> module to search, list, add or remove maven repositories.
